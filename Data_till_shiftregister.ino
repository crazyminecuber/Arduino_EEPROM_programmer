



#define clockPin 12
#define shiftPin 13
#define pulsTid 50
#define IO0 2
#define IO1 3
#define IO2 4
#define IO3 5
#define IO4 6
#define IO5 7
#define IO6 8
#define IO7 9
#define CE 10
#define addressLines 8192
#define writeFlag B10100000
#define readFlag  B11000000
#define resetFlag B10011111
#define dbReadByte false
#define dbSetAddress false
#define dbEnableChip false
#define dbWriteByte false
#define antalChip 3 
#define KontrollSignaler 24



enum Mode { WriteMode, ReadMode};


/*
Shiftregistret inneh√•ller alla adresser + OE och WE

*/

const byte dataA[] = {B00000000, B00000010, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000001, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000001, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000001, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000001, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000000, B00000100, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000000, B00000100, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000000, B00000100, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000000, B00000100, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000000, B00000100, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000000, B00000100, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000000, B00000100, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000000, B00000100, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000001, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000001, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000001, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000001, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000000, B00000010, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 



};



  const byte dataB[] = {B00010000, B00000000, B00000000, B00000100, B00000000, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00000000, B00000100, B00000000, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00000000, B00000100, B00000000, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00000000, B00000100, B00000000, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00100000, B00000100, B00000000, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00100000, B00000100, B00000000, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00100000, B00000100, B00000000, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00100000, B00000100, B00000000, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00100000, B00000100, B00000000, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00100000, B00000100, B00000000, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00100000, B00000100, B00000000, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00100000, B00000100, B00000000, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00100000, B00000100, B00000000, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00100000, B00000100, B00000000, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00100000, B00000100, B00000000, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00100000, B00000100, B00000000, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00100000, B00000000, B00000100, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00100000, B00000000, B00000100, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00100000, B00000000, B00000100, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00100000, B00000000, B00000100, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00100000, B00000000, B00000100, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00100000, B00000000, B00000100, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00100000, B00000000, B00000100, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00100000, B00000000, B00000100, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00100000, B10000000, B00000100, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00100000, B10000000, B00000100, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00100000, B10000000, B00000100, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00100000, B10000000, B00000100, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00100000, B00000010, B00000100, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00100000, B00000010, B00000100, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00100000, B00000010, B00000100, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00100000, B00000010, B00000100, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00100000, B00000011, B00000100, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00100000, B00000011, B00000100, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00100000, B00000011, B00000100, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00100000, B00000011, B00000100, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00101000, B00000100, B00000000, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00101000, B00000100, B00000000, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00101000, B00000100, B00000000, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00101000, B00000100, B00000000, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00000000, B00000100, B00000000, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00101000, B00000100, B00000000, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00000000, B00000100, B00000000, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00000000, B00000100, B00000000, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00000000, B00000100, B00000000, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00000000, B00000100, B00000000, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00101000, B00000100, B00000000, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00000000, B00000100, B00000000, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00100000, B00000100, B00000000, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00100000, B00000100, B00000000, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00100000, B00000100, B00000000, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00100000, B00000100, B00000000, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00000000, B00000100, B00000000, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00000000, B00000100, B00000000, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00000000, B00000100, B00000000, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00000000, B00000100, B00000000, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00000000, B00000100, B00000000, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00000000, B00000100, B00000000, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00000000, B00000100, B00000000, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00000000, B00000100, B00000000, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00000000, B00000100, B00000000, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00000000, B00000100, B00000000, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00000000, B00000100, B00000000, B00000000, B00000000, B00000000, 

B00010000, B00000000, B00000000, B00000100, B00000000, B00000000, B00000000, B00000000, 




};



  const byte dataC[] = {B00000010, B00000100, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B01000100, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B01000100, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B01000100, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B01000100, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B10000100, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B10000100, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B10000100, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B10000100, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B00000100, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B00000100, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B00000100, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B00000100, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B00000110, B00011000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B00000110, B00011000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B00000110, B00011000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B00000110, B00011000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B00000110, B00101000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B00000110, B00101000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B00000110, B00101000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B00000110, B00101000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B00000110, B00001000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B00000110, B00001000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B00000110, B00001000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B00000110, B00001000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B10000100, B01000000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B10000100, B01000000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B10000100, B01000000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B10000100, B01000000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B10000100, B01000000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B10000100, B01000000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B10000100, B01000000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B10000100, B01000000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B00000100, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B00000100, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B00000100, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B00000100, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B00000100, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B00000100, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B00000100, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B00000100, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B00000100, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B00000100, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 

B00000010, B00000100, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, 




};


  const PROGMEM uint16_t addresser[] = {0, 1, 2, 3, 4, 5, 6, 7, 128, 129, 130, 131, 132, 133, 134, 135, 256, 257, 258, 259, 260, 261, 262, 263, 384, 385, 386, 387, 388, 389, 390, 391, 8, 9, 10, 11, 12, 13, 14, 15, 136, 137, 138, 139, 140, 141, 142, 143, 264, 265, 266, 267, 268, 269, 270, 271, 392, 393, 394, 395, 396, 397, 398, 399, 16, 17, 18, 19, 20, 21, 22, 23, 144, 145, 146, 147, 148, 149, 150, 151, 272, 273, 274, 275, 276, 277, 278, 279, 400, 401, 402, 403, 404, 405, 406, 407, 24, 25, 26, 27, 28, 29, 30, 31, 152, 153, 154, 155, 156, 157, 158, 159, 280, 281, 282, 283, 284, 285, 286, 287, 408, 409, 410, 411, 412, 413, 414, 415, 32, 33, 34, 35, 36, 37, 38, 39, 160, 161, 162, 163, 164, 165, 166, 167, 288, 289, 290, 291, 292, 293, 294, 295, 416, 417, 418, 419, 420, 421, 422, 423, 40, 41, 42, 43, 44, 45, 46, 47, 168, 169, 170, 171, 172, 173, 174, 175, 296, 297, 298, 299, 300, 301, 302, 303, 424, 425, 426, 427, 428, 429, 430, 431, 48, 49, 50, 51, 52, 53, 54, 55, 176, 177, 178, 179, 180, 181, 182, 183, 304, 305, 306, 307, 308, 309, 310, 311, 432, 433, 434, 435, 436, 437, 438, 439, 56, 57, 58, 59, 60, 61, 62, 63, 184, 185, 186, 187, 188, 189, 190, 191, 312, 313, 314, 315, 316, 317, 318, 319, 440, 441, 442, 443, 444, 445, 446, 447, 64, 65, 66, 67, 68, 69, 70, 71, 192, 193, 194, 195, 196, 197, 198, 199, 320, 321, 322, 323, 324, 325, 326, 327, 448, 449, 450, 451, 452, 453, 454, 455, 72, 73, 74, 75, 76, 77, 78, 79, 200, 201, 202, 203, 204, 205, 206, 207, 328, 329, 330, 331, 332, 333, 334, 335, 456, 457, 458, 459, 460, 461, 462, 463, 80, 81, 82, 83, 84, 85, 86, 87, 208, 209, 210, 211, 212, 213, 214, 215, 336, 337, 338, 339, 340, 341, 342, 343, 464, 465, 466, 467, 468, 469, 470, 471, 88, 89, 90, 91, 92, 93, 94, 95, 216, 217, 218, 219, 220, 221, 222, 223, 344, 345, 346, 347, 348, 349, 350, 351, 472, 473, 474, 475, 476, 477, 478, 479, 96, 97, 98, 99, 100, 101, 102, 103, 224, 225, 226, 227, 228, 229, 230, 231, 352, 353, 354, 355, 356, 357, 358, 359, 480, 481, 482, 483, 484, 485, 486, 487, 104, 105, 106, 107, 108, 109, 110, 111, 232, 233, 234, 235, 236, 237, 238, 239, 360, 361, 362, 363, 364, 365, 366, 367, 488, 489, 490, 491, 492, 493, 494, 495, 112, 113, 114, 115, 116, 117, 118, 119, 240, 241, 242, 243, 244, 245, 246, 247, 368, 369, 370, 371, 372, 373, 374, 375, 496, 497, 498, 499, 500, 501, 502, 503, 120, 121, 122, 123, 124, 125, 126, 127, 248, 249, 250, 251, 252, 253, 254, 255, 376, 377, 378, 379, 380, 381, 382, 383, 504, 505, 506, 507, 508, 509, 510, 511,}; 
  
  
  void setup()
{
   startSekvens();
  /* Serial.print("Data ");
   Serial.println(dataC[34]);
   Serial.print("Addresser ");
   Serial.println(addresser[34]);
    delay(1000);
   writeByte(dataC[34], addresser[34]);*/
  doTheThing();
  slutSekvens();
}

void doTheThing()
{
  int addresslangd = sizeof(addresser)/ sizeof(int);
  Serial.println(addresslangd);
  for(int i = 0; i < addresslangd; i ++)
  {
    /*Serial.print("i = ");
    Serial.println(i);
    Serial.print("addresser[i] = ");
    Serial.println(pgm_read_word_near(addresser + i));*/
    writeByte(dataC[i], pgm_read_word_near(addresser + i));
  }
  enableChip(false);
  Serial.println("Done");
  enableChip(false);
}
void readEEPROM()
{
  for(int i = 0; i < 4; i++)
  {
    for(int j = 0; j < 16; j++)
      {
        for(int k = 0; k < 8; k++)
        {
          
        }
      }
  }
}

void loop()
{
  //Does so that one can type a number into monitor and get the chip to display the data at that address
 if(Serial.available()> 0)
 {
    String input = Serial.readString();
    int tal = input.toInt();
    Serial.print("L√§ser ");
    Serial.println(tal, BIN);
    setAddress(tal, ReadMode);
    Serial.print("Datan √§r ");
    Serial.println(readByte(tal), BIN);
    enableChip(true);
  }
}





















//Shiftar en int ett visst antal bin√§ra steg √•t b√•da riktningarna
int shiftTal(int tal, int shiftSteps)
{
  if(shiftSteps < 0)
  {
    for(shiftSteps; shiftSteps < 0; shiftSteps++)
    {
      if(tal == 1) tal = 0; 
      else tal/= 2;
    }
  }
  else
  {
    for(shiftSteps; shiftSteps > 0; shiftSteps--)
    {
      if(tal == 0)tal = 1;
      tal*= 2;
    }
  }
  return tal;
}

//Writes one byte to specified address
void writeByte(byte data, uint16_t address)
{
  enableChip(false);
  setModePins(WriteMode);
  if(dbWriteByte)Serial.print("Writing byte ");
  if(dbWriteByte)Serial.print(data);
  if(dbWriteByte)Serial.print(" , To address ");
  if(dbWriteByte)Serial.println(address);
  if(setAddress(address, WriteMode)){
    for(int i = IO0; i <= IO7; i++)
    { 
       digitalWrite(i, bitRead(data, i - IO0));
      Serial.println(bitRead(data, i - IO0));
   }
   enableChip(true);
   delay(1);
  
  
  enableChip(false);
  delay(1);
  }
}



//Reads one byte from a specifed address
byte readByte(int address)
{
  enableChip(false);
  setModePins(ReadMode);
  if(dbReadByte)Serial.println("Reading EEPROM");
  //sets address and readmode
  if(setAddress(address, ReadMode)){
    enableChip(true);
    //Reads data from IO7 to IO0 by shifting left and adding as the least significant bit
    byte data = 0;
    for(int i = IO7; i >= IO0; i --)
    {
      data = (data << 1 )+ digitalRead(i);
    }
    if(dbReadByte)Serial.print("Read byte ");
    if(dbReadByte)Serial.println(data, HEX);
    if(dbReadByte)Serial.println("");
    return data;
  }
}


//sets address + mode
// checks that address is ok
bool setAddress(int address, Mode mode)
{
  enableChip(false);
  //If address is ok set up for transfer
  if(dbSetAddress)Serial.println(address);
  if(address >= 0 && address < addressLines)
  {
    if(dbSetAddress)Serial.print("Address and mode OK. Setting address to ");
    if(dbSetAddress)Serial.println(address);
    
    //transfer 8 LSBs
    shiftOut(shiftPin, clockPin, LSBFIRST, address);

    //fixes highest bits and bitwise or with flag for write and read
    byte secoundByte = address >> 8;
    secoundByte = secoundByte & resetFlag ;//tar bort overflowdata som kan p√•verka om write enbale √§r av
    secoundByte = secoundByte | (mode == WriteMode ? writeFlag  : readFlag);
    if(dbSetAddress)Serial.print("Secoundbyte in address = ");
    if(dbSetAddress)Serial.println(secoundByte, BIN);
    shiftOut(shiftPin, clockPin,LSBFIRST, secoundByte);
    delay(1);
    return true;
  }
  else Serial.println("The requested address was not allowed.");
  return false;
}
















void startSekvens()
{
  pinMode(clockPin, OUTPUT);
  pinMode(shiftPin, OUTPUT);
  pinMode(CE, OUTPUT);
  enableChip(false);
  Serial.begin(9600);
}

void slutSekvens()
{
  readByte(0);
  setModePins(ReadMode);
  enableChip(true);
}

//Enables/ diables chip depending on state variable
void enableChip(bool state)
{
  delay(1);
  if(state == true) 
  {   
    if(dbEnableChip)Serial.println("Chip enabled");
    digitalWrite(CE, LOW);
  }
  else 
  {
    if(dbEnableChip)Serial.println("Chip disabled");
    digitalWrite(CE, HIGH);
  }
  delay(1);
  
}

//Sets all IO pins to either output or input depending on mode
void setModePins(Mode mode)
{
  if(mode == WriteMode)
  {
    for(int i = IO0; i <= IO7; i++)
    {
      pinMode(i, OUTPUT);
    }
  }
  else
  {
    for(int i = IO0; i <= IO7; i++)
    {
      pinMode(i, INPUT);
    }
  }
}










